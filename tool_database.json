{"Chainsaw": {"About": {"Description": "A CLI tool for searching & hunting for threats within Windows event logs", "Free/Paid": "Free", "Latest stable release": {"version": "1.0.2", "release_date": "06 Sep 2021"}, "Official site": "https://github.com/Countercept/chainsaw", "Github": "https://github.com/Countercept/chainsaw", "Official documentation": "https://github.com/countercept/chainsaw#readme", "Useful for": ["Initial triage", "Verifying hypothesis and/or suspicion(s)", "Searching for a specific keyword/event"]}, "How to install": {"Windows": "1. Go to https://github.com/countercept/chainsaw/releases/latest\n2. Under Assets, click on \"chainsaw_x86_64-pc-windows-msvc.zip\" to download\n3. Go to the directory where your downloaded zipped file is in File Explorer\n4. Extract \"chainsaw_x86_64-pc-windows-msvc.zip\" to the directory of your choice\n5. That's it, you're ready to use Chainsaw!\n   (But only in the directory where chainsaw.exe is)\n\n========\nOPTIONAL\n========\nTo use Chainsaw anywhere:\n1. Open the Environment Variables window by doing either 1 of the following:\n   a. Running the following command in a terminal:\n      +-------------------------------------------+\n      |rundll32 sysdm.cpl,EditEnvironmentVariables|\n      +-------------------------------------------+\n   b. Press the Windows key and search \"path\" or \"environment variables\"\n      and click on the one that reads \"Edit the system environment variables.\n      A window called \"System Properties\" should open and be in the \"Advanced\"\n      tab. Click on the button \"Environment Variables...\"\n   c. Press Win+R to open the \"Run\" dialog box, type in \"SystemPropertiesAdvanced\"\n      and click on the \"OK\" button. A window called \"System Properties\" should open\n      and be in the \"Advanced\" tab. Click on the button \"Environment Variables...\"\n2. Under \"System variables\", find the variable \"Path\". Click it and then click\n   the \"Edit...\" button (or just double click \"Path\")\n3. Click on the \"New\" button and type in the directory path to chainsaw.exe\n   \u2022 i.e. If chainsaw.exe is in \"C:\\Users\\user\\Downloads\\Chainsaw\", then the path\n     you should enter is: \"C:\\Users\\user\\Downloads\\Chainsaw\"\n4. Once done, click \"OK\" and that's it! You can now use Chainsaw anywhere\n   in your terminal!\n", "Linux": "1. Go to https://github.com/countercept/chainsaw/releases/latest\n2. Under Assets, you will notice \"chainsaw_x86_64-unknown-linux-gnu.tar.gz\"\n   and \"chainsaw_x86_64-unknown-linux-musl.tar.gz\". The file you download depends\n   on what your Linux distro is.\n   \u2022 E.g. For distros like Kali Linux and Ubuntu, you'd go for the file with \"gnu\" in\n     the name\n3. Open your terminal and enter:\n   +----------------------------+\n   |cd {PATH_TO_DOWNLOADED_FILE}|\n   +----------------------------+\n   {PATH_TO_DOWNLOADED_FILE}:\n   The path to the directory where the downloaded file is\n4. Enter:\n   +-----------------------+\n   |tar -xvzf {TAR_GZ_FILE}|\n   +-----------------------+\n   {TAR_GZ_FILE}:\n   The downloaded file\n   \u2022 E.g. chainsaw_x86_64-unknown-linux-gnu.tar.gz\n   -x:\n   Tells tar to extract the files\n   -v:\n   Stands for verbose. Tells tar to list out the files it's extracting\n   -z:\n   Tells tar to decompress the files using gzip\n   -f:\n   TAR_GZ_FILE must follow after this option since it tells tar the name/path of\n   the archive\n5. That's it, you're ready to use Chainsaw!\n   (But only in the directory where chainsaw is)\n\n========\nOPTIONAL\n========\nTo use Chainsaw anywhere:\n1. In a terminal, enter:\n   +-------------------+\n   |sudo nano ~/.bashrc|\n   +-------------------+\n2. Enter:\n   +------------------------------------+\n   |export PATH=$PATH:{PATH_TO_CHAINSAW}|\n   +------------------------------------+\n   {PATH_TO_CHAINSAW}:\n   The path to where chainsaw.exe is\n   \u2022 E.g. C:\\Users\\user\\Downloads\\Chainsaw\\\n3. That's it! You can now use Chainsaw anywhere!\n", "Mac": "1. Go to https://github.com/countercept/chainsaw/releases/latest\n2. Under Assets, click on \"chainsaw_x86_64-apple-darwin.zip\" to download\n3. Go to the directory where your downloaded zipped file is in Finder\n4. Extract \"chainsaw_x86_64-apple-darwin.zip\" to the directory of your choice\n5. That's it, you're ready to use Chainsaw!\n   (But only in the directory where chainsaw.exe is)\n\n========\nOPTIONAL\n========\nTo use Chainsaw anywhere:\n1. In a terminal, enter:\n   +-------------------------+\n   |sudo nano ~/.bash_profile|\n   +-------------------------+\n2. Enter:\n   +------------------------------------+\n   |export PATH={PATH_TO_CHAINSAW}:$PATH|\n   +------------------------------------+\n3. That's it! You can now use Chainsaw anywhere!\n"}, "How to use": {"Search": {"help": "To search:\n+------------------------------------------------+\n|chainsaw search {PATH_TO_EVTX} [OPTIONS] [FLAGS]|\n+------------------------------------------------+\n{PATH_TO_EVTX}:\nThe path to the EVTX file(s)\n\u2022 E.g. C:\\Logs, C:\\Logs\\Security.evtx\n[OPTIONS]:\n(--event | -e) {EVENT_ID}\n\u2022 {EVENT_ID}:\n  The Windows Event ID you are trying to search for\n  (i.e. Find all Windows event logs in {PATH_TO_EVTX} that has\n  Windows Event ID: {EVENT_ID})\n  \u2022 Can be Sysmon event ID\n  \u2022 Note: You can only specify 1 event ID\n(--string | -s) {STRING}\n\u2022 {STRING}:\n  The string you are trying to match the Windows event log(s) against\n  (i.e. Find all Windows event logs in {PATH_TO_EVTX} that has the string:\n  {STRING})\n  \u2022 Note: You can only specify 1 string\n(--regex-search | -r) {REGEX}:\n\u2022 {REGEX}:\n  The regex you are trying to match the Windows event log(s) against\n  (i.e. Find all Windows event logs in {PATH_TO_EVTX} that matches the regex:\n  {REGEX})\n  \u2022 Note: You can only specify 1 regex\n(--output | -o) {NAME_OF_OUTPUT_FILE}:\n\u2022 {NAME_OF_OUTPUT_FILE}:\n  What you want to call the file you are going to output\n  \u2022 Note: You can give the output file any extension (.txt, .csv, etc.),\n    the content in the file will always be in a JSON format\n[FLAGS]:\n--case-insensitive | -i:\nSet search to case insensitive\n--help | -h:\nShow how to use Chainsaw's search feature\n--version | -V:\nPrint the current version of Chainsaw's search feature", "examples": {"Search for events with the event ID 4624 (\"An account was successfully logged on\")": "+-------------------------------+\n|chainsaw search C:\\Logs -e 4624|\n+-------------------------------+", "Search for events with the string \"admin\"": "+----------------------------------+\n|chainsaw search C:\\Logs -s \"admin\"|\n+----------------------------------+\nOR\n+----------------------------------+\n|chainsaw search C:\\Logs -r \"admin\"|\n+----------------------------------+", "Search for events logged on the 16th and 21st July 2021": "+--------------------------------------------+\n|chainsaw search C:\\Logs -r \"2021-07-(16|21)\"|\n+--------------------------------------------+\n\u2022 Note: Chainsaw doesn't have a way to actually search for events based on dates\n  and times. This method just finds any event that matches the pattern,\n  datetime or not", "Search for events where the user \"admin\" had successfully logged on (event ID 4624)\non either the 16th or 21st of July 2021": "+---------------------------------------------------------------+\n|chainsaw search C:\\Logs -e 4624 -s \"admin\" -r \"2021-07-(16|21)\"|\n+---------------------------------------------------------------+"}}, "Hunt": {"help": "To hunt:\n+----------------------------------------------+\n|chainsaw hunt {PATH_TO_EVTX} [OPTIONS] [FLAGS]|\n+----------------------------------------------+\n{PATH_TO_EVTX}:\nThe path to the EVTX file(s)\n\u2022 E.g. C:\\Logs, C:\\Logs\\Security.evtx\n[OPTIONS]:\n(--rules | -r) {PATH_TO_SIGMA_RULES}\n\u2022 {PATH_TO_SIGMA_RULES}:\n  \u2022 Path to the Sigma rules that will be used during the hunt\n  \u2022 All YML files in {PATH_TO_SIGMA_RULES} will be used\n  \u2022 Note: You don't have to create your own Sigma rules, the ones provided by\n    Chainsaw is good enough\n    \u2022 Location: C:\\wherever you placed chainsaw\\chainsaw\\sigma_rules\n(--mapping | -m) {PATH_TO_MAPPING_FILE}\n\u2022 {PATH_TO_MAPPING_FILE}:\n  \u2022 Path to the mapping file (YML file) that {PATH_TO_SIGMA_RULES} will use\n  \u2022 Note: You don't have to create your own mapping file, the one provided by\n    Chainsaw is good enough\n    \u2022 Location:\n      C:\\wherever you placed chainsaw\\chainsaw\\mapping_files\\sigma-mapping.yml\n--col-width {COL_WIDTH}\n\u2022 {COL_WIDTH}:\n  \u2022 How wide you want the width of the column to be\n    \u2022 Default: 40\n--csv {WHERE_TO_STORE_CSV_OUTPUTS}\n\u2022 {WHERE_TO_STORE_CSV_OUTPUTS}:\n  \u2022 Name of the directory that will store the CSV(s). The directory will be\n    created will if it doesn't exist\n[FLAGS]:\n--no-builtin:\nDon't use the built-in detection logic\n\u2022 You will need to add the -r {PATH_TO_SIGMA_RULES} -m {PATH_TO_MAPPING_FILE}\n  to your command\n--full:\nShow full event output, else output will be truncated to improve readability\n--help | -h:\nShow how to use Chainsaw's hunt feature\n--json | -j:\nOutput result to screen in a JSON format\n\u2022 Note: Chainsaw mentions that using this flag will \"Save the full event log\n  and associated detections to disk in a JSON format to the specified path\".\n  The problem is that this flag doesn't accept any argument after it which means\n  you can't specify a path to save the output. So if you want to save the JSON\n  output, you would need to use the \">\" operator\n--lateral-all:\nList additional event ID 4624 events that may be about lateral movement\n--quiet | -q:\nDon't show anything (banner, loading, how many EVTX files found, etc.)\nbesides the results\n--authors:\nShow the authors that wrote the rules\n--version | -V:\nPrint the current version of Chainsaw's hunt feature", "examples": {"Hunt logs using default Chainsaw logic": "+---------------------+\n|chainsaw hunt C:\\Logs|\n+---------------------+", "Hunt logs using default Chainsaw logic & Sigma rules": "+-----------------------------------------------------------------------+\n|chainsaw hunt C:\\Logs                                                  |\n|-r C:\\Users\\user\\Documents\\Chainsaw\\sigma_rules                        |\n|-m C:\\Users\\user\\Documents\\Chainsaw\\mapping_files\\sigma-mapping.yml.yml|\n+-----------------------------------------------------------------------+", "Hunt logs using default Chainsaw logic & Sigma rules & list any additional\n4624 events that may be related to lateral movement": "+-----------------------------------------------------------------------+\n|chainsaw hunt C:\\Logs --lateral-all                                    |\n|-r C:\\Users\\user\\Documents\\Chainsaw\\sigma_rules                        |\n|-m C:\\Users\\user\\Documents\\Chainsaw\\mapping_files\\sigma-mapping.yml.yml|\n+-----------------------------------------------------------------------+"}, "extra_info": "==================\nHOW CHAINSAW HUNTS\n==================\nChainsaw uses 1 of 2 ways to hunt for malicious events in your\nWindows event logs:\n\u2022 The built-in detection logic\n  \u2022 Will always be used unless --no-builtin specified\n  \u2022 Detects:\n    \u2022 Brute-force of local user accounts\n    \u2022 Logins (E.g. RDP logins & Network logins)\n    \u2022 Users being created/added to sensitive user groups\n    \u2022 Extraction & parsing of AV alerts from\n      Windows Defender, F-Secure, Sophos, & Kaspersky\n    \u2022 Deletion of key event logs, or termination of event log service\n\u2022 Sigma rule matching\n  \u2022 Need to specify the options -r & -m\n  \u2022 Sigma rules: The rules you want to use when hunting\n  \u2022 Mapping: Which event IDs to apply Sigma rules to, what fields are important,\n    & which to show\n    \u2022 By default, Sigma rules are applied to the following event IDs:\n      +-------------------------------------------+\n      |Event ID|Event                             |\n      +-------------------------------------------+\n      |       1|Process Creation (Sysmon)         |\n      +-------------------------------------------+\n      |       3|Network Connection (Sysmon)       |\n      +-------------------------------------------+\n      |       7|Image Loaded (Sysmon)             |\n      +-------------------------------------------+\n      |      11|FileCreate (Sysmon)               |\n      +-------------------------------------------+\n      |      13|RegistryEvent (Value Set) (Sysmon)|\n      +-------------------------------------------+\n      |    4104|PowerShell Script Blocks          |\n      +-------------------------------------------+\n      |    4688|A New Process Has Been Created    |\n      +-------------------------------------------+\n      |    4698|A New Scheduled Task Was Created  |\n      +-------------------------------------------+\n      |    7045|Service Creation                  |\n      +-------------------------------------------+\n      You can add more event IDs if needed"}}, "Errors & how to fix": {"In-built detection logic disabled (--no-builtin) but no detection rules\n   provided! Use --rules to specify rules": "--no-builtin tells Chainsaw that you don't want to use its built-in detection\nlogic but this means that you need to specify the Sigma rules\n(along with the mapping file) that you want to use instead.\nAdd -r {PATH_TO_SIGMA_RULES} -m {PATH_TO_MAPPING_FILE} to your command and try\nrunning your command again.\n", "The argument '--event <event-id>' was provided more than once,\n   but cannot be used multiple times": "You might have tried to include more than one event ID thinking that you could\nsearch for more than one event ID. Unfortunately, Chainsaw only allows you to\nsearch for 1 event ID. So you would need to run the command again, changing the\ncurrent event ID to the next event ID or you can use the regex option to specify\nthe event ID (E.g. To search for event IDs 4624 and 6008: EventID: (4624|6008))\n"}, "Pros & Cons": {"Pros": ["Easy to use", "Open-source", "Well-documented", "Can customise hunt", "Can search/hunt multiple event logs in 1 go", "Can be exported (CSV, JSON, TXT)", "Comes with a bunch of its own Sigma rules so you don't have to create one from\n  scratch"], "Cons": ["Can't search for more than 1 event ID / string", "Can't search in a key:value manner\n  \u2022 i.e. You can search for either \"TargetUserName\" (key) or \"admin\" (value),\n    but not \"TargetUserName\":\"admin\"", "Content will always be in a JSON format when you export the search result,\n  no matter what file extension you give", "Need to know regex & sigma rules to fully utilize Chainsaw"]}, "Bookmarked": null}, "DeepBlueCLI": {"About": {"Description": "A PowerShell module for threat hunting within Windows event logs", "Free/Paid": "Free", "Latest stable release": {"version": null, "release_date": null}, "Official site": "https://github.com/sans-blue-team/DeepBlueCLI", "Github": "https://github.com/sans-blue-team/DeepBlueCLI", "Official documentation": "https://github.com/sans-blue-team/DeepBlueCLI#readme", "Useful for": ["Initial triage", "Verifying hypothesis and/or suspicion(s)"]}, "How to install": {"Windows": "1. Go to https://github.com/sans-blue-team/DeepBlueCLI\n2. Click on the green button labelled \"Code\" and then click on \"Download ZIP\"\n3. Go to the directory where your downloaded zipped file is in File Explorer\n4. Extract the downloaded ZIP file (should be called \"DeepBlueCLI-master.zip\")\n5. That's it, you're ready to use DeepBlueCLI!\n   (But only in the directory where DeepBlueCLI.ps1 is)\n", "Linux": "1. Go to https://github.com/sans-blue-team/DeepBlueCLI\n2. Click on the green button labelled \"Code\" and copy the URL shown under \"HTTPS\"\n3. Open your terminal and run the following command:\n\"git clone {GIT_URL}\"\n{GIT_URL}:\nThe URL you copied in step 2\n4. That's it, you're ready to use DeepBlueCLI!\n   (But only in the directory where DeepBlueCLI.ps1 is)", "Mac": "1. Go to https://github.com/sans-blue-team/DeepBlueCLI\n2. Click on the green button labelled \"Code\" and copy the URL shown under \"HTTPS\"\n3. Open your terminal and run the following command:\n\"git clone {GIT_URL}\"\n{GIT_URL}:\nThe URL you copied in step 2\n4. That's it, you're ready to use DeepBlueCLI!\n   (But only in the directory where DeepBlueCLI.ps1 is)"}, "How to use": "1. Launch PowerShell as an administrator\n2. cd to where DeepBlueCLI.ps1 is \n3. Enter \".\\DeepBlueCLI.ps1 {PATH_TO_EVTX}\"\n   \u2022 E.g. .\\DeepBlue.ps1 .\\evtx\\mimikatz-privesc-hashdump.evtx", "Errors & how to fix": {"This script contains malicious content and has been blocked by your\n   antivirus software": "You can do either 1 of the following:\na. Disable your antivirus\nb. Whitelist DeepBlueCLI\nDo either methods at your own risk\n"}, "Pros & Cons": {"Pros": ["Easy to use", "Can be exported (TXT, CSV, HTML, JSON, XML)"], "Cons": ["Can't search for more than 1 event ID / string", "Might get blocked by your antivirus software", "Not well documented", "Can't hunt multiple event logs in 1 shot", "Can't customize your hunt"]}, "Bookmarked": false}}